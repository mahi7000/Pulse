generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  name      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  habits        Habit[]
  groups        GroupMember[]
  messages      GroupMessage[]
  ownedGroups   Group[]   @relation("GroupOwner")
  challenges    ChallengeParticipant[]
  groupAdmins   GroupAdmin[]

  @@index([createdAt])
}

model Habit {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.VarChar(500)
  targetCount Int       @default(1)
  color       String    @default("blue.400") @db.VarChar(20)
  createdAt   DateTime  @default(now())

  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs        HabitLog[]
  streaks     Streak[]

  @@index([userId])
  @@index([createdAt])
}

model HabitLog {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  completed Boolean  @default(false)
  count     Int      @default(1)

  habitId   Int
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@index([habitId, date])
  @@index([date])
  @@index([completed])
}

model Streak {
  id             Int      @id @default(autoincrement())
  currentStreak  Int      @default(0)
  longestStreak  Int      @default(0)
  lastUpdated    DateTime @default(now())

  habitId        Int
  habit          Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@index([habitId])
  @@index([lastUpdated])
}

model Group {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.VarChar(500)
  createdAt   DateTime  @default(now())

  ownerId Int
  owner   User      @relation(fields: [ownerId], references: [id], name: "GroupOwner", onDelete: Cascade)

  admins   GroupAdmin[]
  members  GroupMember[]
  messages GroupMessage[]
  challenges GroupChallenge[]
}

model GroupAdmin {
  id      Int   @id @default(autoincrement())
  userId  Int
  groupId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupMember {
  id        Int     @id @default(autoincrement())
  joinedAt  DateTime @default(now())

  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId   Int
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([groupId])
}

model GroupMessage {
  id        Int      @id @default(autoincrement())
  text      String   @db.VarChar(1000)
  sentAt    DateTime @default(now())

  senderId  Int
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId, sentAt])
  @@index([sentAt])
}

model GroupChallenge {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String    @db.VarChar(500)
  startDate   DateTime
  endDate     DateTime
  target      Int

  groupId     Int
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participants ChallengeParticipant[]

  @@index([groupId])
  @@index([startDate, endDate])
}

model ChallengeParticipant {
  id             Int      @id @default(autoincrement())
  completedCount Int      @default(0)

  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId    Int
  challenge      GroupChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@index([userId, challengeId])
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  code      String   @db.VarChar(10)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}

model RevokedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  revokedAt DateTime @default(now())
}